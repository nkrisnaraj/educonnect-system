"use client";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import axios from "axios";
import MainNavbar from "@/components/MainNavbar";
import "../globals.css";
import Footer from "@/components/Footer";

export default function Register() {
  const router = useRouter();
  const [message, setMessage] = useState("");
  const [isSuccess, setIsSuccess] = useState(false);
  const [zoomVerified, setZoomVerified] = useState(false);
  const [verifiedEmail, setVerifiedEmail] = useState("");
  const [showZoomButton, setShowZoomButton] = useState(false);
  const [isZoomLoading, setIsZoomLoading] = useState(false);

  const [form, setForm] = useState({
    username: "",
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    mobile: "",
    nicNo: "",
    address: "",
    yearOfAL: "",
    schoolName: "",
    city: "",
    district: ""
  });

  // Check if user came back from Zoom OAuth and restore form data
  useEffect(() => {
    // Restore form data from localStorage if available
    const savedForm = localStorage.getItem('registrationForm');
    if (savedForm) {
      try {
        const parsedForm = JSON.parse(savedForm);
        setForm(parsedForm);
        if (parsedForm.email.includes("@gmail.com")) {
          setShowZoomButton(true);
        }
      } catch (error) {
        console.error('Error parsing saved form data:', error);
      }
    }

    // Check if user returned from Zoom OAuth
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('zoom_verified') === 'true') {
      const email = urlParams.get('email');
      if (email) {
        setZoomVerified(true);
        setVerifiedEmail(email);
        setShowZoomButton(false);
        
        // Update form email to match verified email
        setForm(prev => ({ ...prev, email }));
        
        // Clear URL parameters
        window.history.replaceState({}, document.title, window.location.pathname);
        
        // Clear saved form data since we're completing registration
        localStorage.removeItem('registrationForm');
      }
    }
  }, []);

  // Handle Zoom login
  const handleZoomLogin = async () => {
    try {
      setIsZoomLoading(true);
      
      // Save current form data to localStorage
      localStorage.setItem('registrationForm', JSON.stringify(form));
      
      // Get Zoom OAuth URL from backend
      const response = await axios.get('http://localhost:8000/api/auth/zoom/login/');
      const { auth_url } = response.data;
      
      // Redirect to Zoom OAuth
      window.location.href = auth_url;
    } catch (error) {
      console.error('Error initiating Zoom login:', error);
      setMessage('Failed to connect to Zoom. Please try again.');
      setIsSuccess(false);
      setIsZoomLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
    
    // Show Zoom button if email is Gmail
    if (name === 'email') {
      if (value.includes("@gmail.com") && !zoomVerified) {
        setShowZoomButton(true);
      } else if (!value.includes("@gmail.com")) {
        setShowZoomButton(false);
      }
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setMessage("");

    // Check if this is a student registration (has student profile data)
    const hasStudentProfile = form.nicNo || form.yearOfAL || form.schoolName || form.mobile;

    // Validate Gmail requirement for students
    if (hasStudentProfile && !form.email.includes("@gmail.com")) {
      setMessage("‚ùå Students must register with a Gmail address and verify their Zoom account.");
      setIsSuccess(false);
      return;
    }

    // Check Zoom verification for student registrations
    if (hasStudentProfile && !zoomVerified) {
      setMessage("‚ùå Students must verify their Zoom account before registration. Please click 'Sign in with Zoom' first.");
      setIsSuccess(false);
      setShowZoomButton(true);
      return;
    }

    // Check email match for verified users
    if (hasStudentProfile && zoomVerified && form.email !== verifiedEmail) {
      setMessage(`‚ùå Email mismatch. You verified ${verifiedEmail} with Zoom, but trying to register with ${form.email}.`);
      setIsSuccess(false);
      return;
    }

    const payload = {
      username: form.username,
      first_name: form.firstName,
      last_name: form.lastName,
      email: form.email,
      password: form.password,
      student_profile: hasStudentProfile ? {
        mobile: form.mobile,
        nic_no: form.nicNo,
        address: form.address,
        year_of_al: form.yearOfAL,
        school_name: form.schoolName,
        city: form.city,
        district: form.district
      } : null
    };

    try {
      const response = await axios.post("http://localhost:8000/api/auth/register/", payload);
      setMessage("‚úÖ Registration successful! You can now log in.");
      setIsSuccess(true);
      
      // Clear form and localStorage
      setForm({
        username: "",
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        mobile: "",
        nicNo: "",
        address: "",
        yearOfAL: "",
        schoolName: "",
        city: "",
        district: ""
      });
      localStorage.removeItem('registrationForm');
      
      setTimeout(() => {
        router.push("/login");
      }, 2000);
    } catch (error) {
      if (error.response?.data?.zoom_verification_required) {
        setMessage("‚ùå Students must verify their Zoom account before registration.");
        setShowZoomButton(true);
      } else {
        setMessage(error.response?.data?.error || "‚ùå Registration failed. Please try again.");
      }
      setIsSuccess(false);
    }
  };

  return (
    <>
      <MainNavbar />
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 flex flex-col justify-center items-center p-4 transition-colors">
        <form
          onSubmit={handleRegister}
          onSubmit={handleRegister}
          className="bg-white dark:bg-gray-700 p-8 rounded-2xl shadow-lg w-full max-w-5xl transition-colors"
        >
          <div className="flex flex-col items-center mb-4">
            <p className="text-primary dark:text-gray-300 mb-2 text-2xl font-semibold"> Welcome! Let&apos;s get you started</p>
              <Image src="/logo.png" alt="EduConnect Logo" width={100} height={80} className="mb-1"/>
          </div>

          {/* Zoom Verification Status */}
          {zoomVerified && (
            <div className="mb-6 bg-green-100 dark:bg-green-800 border border-green-400 dark:border-green-600 text-green-700 dark:text-green-200 px-4 py-3 rounded-lg">
              <div className="flex items-center">
                <span className="text-green-500 mr-2">‚úÖ</span>
                <span className="font-medium">Zoom account verified: {verifiedEmail}</span>
              </div>
              <p className="text-sm mt-1">You can now complete your student registration.</p>
            </div>
          )}

          {/* Gmail Requirement Notice */}
          {showZoomButton && !zoomVerified && (
            <div className="mb-6 bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 text-blue-800 dark:text-blue-200 px-4 py-3 rounded-lg">
              <div className="flex items-center">
                <span className="text-blue-500 mr-2">‚ÑπÔ∏è</span>
                <span className="font-medium">Student Registration Requirements</span>
              </div>
              <p className="text-sm mt-1">Students must have a Gmail address with a verified Zoom account to register.</p>
            </div>
          )}

          {/* Zoom Verification Button */}
          {showZoomButton && !zoomVerified && (
            <div className="mb-6 text-center">
              <button
                type="button"
                onClick={handleZoomLogin}
                disabled={isZoomLoading}
                className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
              >
                {isZoomLoading ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Connecting to Zoom...
                  </>
                ) : (
                  <>üé• Sign in with Zoom to Verify Account</>
                )}
              </button>
              <p className="mt-2 text-xs text-gray-500 dark:text-gray-400">
                Required for student registration - ensures you have access to Zoom classes
              </p>
            </div>
          )}
          
          {/* Main Registration Form */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            {/* Form fields will go here */}
          </div>
        </form>
      </div>
      <Footer />
    </>
  );
}
                : "bg-red-100 text-red-900 border-red-700 dark:bg-red-800 dark:text-red-100 dark:border-red-400"
            }`}
          >
            {message}
          </div>
        )}

        <form
          onSubmit={handleRegister}
          className="bg-white dark:bg-gray-700 p-8 rounded-2xl shadow-lg w-full max-w-5xl transition-colors"
        >
          <div className="flex flex-col items-center mb-4">
            <p className="text-primary dark:text-gray-300 mb-2 text-2xl font-semibold"> Welcome! Let&apos;s get you started</p>
              <Image src="/logo.png" alt="EduConnect Logo" width={100} height={80} className="mb-1"/>
          </div>


          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Username</label>
              <input
                type="text"
                name="username"
                value={form.username}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="Enter Username"
                required
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Email</label>
              <input
                type="email"
                name="email"
                value={form.email}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="Enter Email"
                required
              />
            </div>


            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">First Name</label>
              <input
                type="text"
                name="firstName"
                value={form.firstName}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="First Name"
                required
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Last Name</label>
              <input
                type="text"
                name="lastName"
                value={form.lastName}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="Last Name"
                required
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Mobile</label>
              <input
                type="text"
                name="mobile"
                value={form.mobile}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="0771234567"
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">NIC No</label>
              <input
                type="text"
                name="nicNo"
                value={form.nicNo}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="200012345678"
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Year of A/L</label>
              <input
                type="text"
                name="yearOfAL"
                value={form.yearOfAL}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="2021"
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">School Name</label>
              <input
                type="text"
                name="schoolName"
                value={form.schoolName}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="School Name"
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Address</label>
              <textarea
                name="address"
                value={form.address}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="Address"
                rows={2}
              />
            </div>
            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">City</label>
              <textarea
                name="city"
                value={form.city}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="City"
                rows={2}
              />
            </div>
            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">district</label>
              <textarea
                name="district"
                value={form.district}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="District"
                rows={2}
              />
            </div>

            <div>
              <label className="block mb-1 font-medium text-gray-700 dark:text-gray-300">Password</label>
              <input
                type="password"
                name="password"
                value={form.password}
                onChange={handleChange}
                className="w-full p-3 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-600 text-gray-900 dark:text-white transition-colors focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="Enter password"
                required
              />
            </div>

          </div>

        <button
          type="submit"
          className="mt-8 w-full bg-blue-600 text-white p-3 rounded hover:bg-blue-700 font-semibold transition duration-300"
        >
          Register
        </button>

          <p className="text-md mt-4 font-semibold text-center text-gray-700 dark:text-gray-300">
            Already have an account?{" "}
            <Link href="/login" className="text-primary font-semibold dark:text-blue-400 hover:underline">
              Login
            </Link>
          </p>
        </form>
      </div>

      
    
      
    </div>
    <Footer />
    
    
    </>
  );
}